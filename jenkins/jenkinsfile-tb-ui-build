branchName = ''
splittedBranchName = []
dockerImageTag = ''
projectVersion = ''

pipeline {
    agent {
        node {
            label 'slaves'
        }
    }
    environment {
        DOCKER_IMAGE_NAME = 'tb-web-ui'
        DOCKER_REGISTRY_URL = 'almaviva.jfrog.io'
        DOCKER_REGISTRY_NAME = 'giotto-docker'
		GIT_COMMIT_SHORT = sh(
						script: "printf \$(git rev-parse --short ${GIT_COMMIT})",
						returnStdout: true
						)
    }
    parameters {
        choice(name: 'TARGET_CUSTOMER', choices: ['default', 'bari', 'messina', 'porto_bari', 'reggio_calabria', 'regione_toscana'], description: 'Target customer')
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    projectVersion = sh script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true
                }
            }
        }
        stage('Maven build') {
            steps {
                dir('ui-ngx/') {
                    withMaven(
                        maven: 'maven_3.5.4',
                        mavenSettingsConfig: 'jfrog.cloud') {
                        sh "mvn clean install -Dcustomer=${params.TARGET_CUSTOMER} -DskipTests"
                    }
                }
            }
        }
        stage('Build Docker image') {
            steps {
                dir('msa/web-ui') {
                    withMaven(
                        maven: 'maven_3.5.4',
                        mavenSettingsConfig: 'jfrog.cloud') {
                        sh 'mvn clean install -Ddockerfile.skip=false -DskipTests'
                    }
                }
            }
        }
        stage('Tag Docker image') {
            steps {
                script {
                    splittedBranchName = "${env.BRANCH_NAME}".split("/");
                    branchName = splittedBranchName[splittedBranchName.length-1];
                    if (branchName == "develop") {
                        dockerImageTag = "${projectVersion}.${BUILD_NUMBER}";
                    }
                    else {
                        dockerImageTag = "${branchName}.${GIT_COMMIT_SHORT}";
                    }
                    sh "docker tag thingsboard/${env.DOCKER_IMAGE_NAME}:${projectVersion} ${env.DOCKER_REGISTRY_URL}/${env.DOCKER_REGISTRY_NAME}/${env.DOCKER_IMAGE_NAME}:${dockerImageTag}"
                }
            }
        }
        stage('Push Docker image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-jfrog-giotto-credential',
                                        usernameVariable: 'DOCKER_USERNAME',
                                        passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} https://${DOCKER_REGISTRY_URL}"
                        sh "docker push ${env.DOCKER_REGISTRY_URL}/${env.DOCKER_REGISTRY_NAME}/${env.DOCKER_IMAGE_NAME}:${dockerImageTag}"
                    }
                }
            }
        }
    }
}